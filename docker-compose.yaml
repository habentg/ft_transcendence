services:
  redis:
    container_name: redis
    image: redis:6-alpine
    restart: unless-stopped
    networks:
      - neon_network
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 3s
      timeout: 3s
      retries: 5

  postgres:
    container_name: db
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - neon_network
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 3s
      retries: 5

  neon_pong:
    container_name: neon_pong
    image: neon_pong_img
    build:
      context: ./source/transcendence/.
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - neon_network
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
    volumes:
      - media_static_vol:/media_static
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/health/" ]
      interval: 3s
      timeout: 3s
      retries: 5
      start_period: 10s

  nginx:
    container_name: nginx
    image: nginx_img
    build:
      context: ./source/nginx/.
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      neon_pong:
        condition: service_healthy
    networks:
      - neon_network
    ports:
      - "443:443"
    volumes:
      - media_static_vol:/media_static

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  media_static_vol:
    driver: local

networks:
  neon_network:
    name: neon_network
    driver: bridge
