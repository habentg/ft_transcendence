you don't want to load unnecessary resources on each page, as it can lead to performance issues and cluttered DOM.

Here are a few strategies to load page-specific resources without removing not-needed resources:

1. Script Tags with Conditional Loading

Use script tags with conditional loading to load JavaScript files only when they're needed. You can use a script loader like script.js to load scripts dynamically.

For example, you can create separate script files for each page, like home.js, signup.js, etc. Each script file would contain only the necessary JavaScript code for that page.

2. CSS File Splitting

Split your CSS files into smaller, page-specific files. This way, you can load only the necessary CSS files for each page.

For example, you can create separate CSS files for each page, like home.css, signup.css, etc. Each CSS file would contain only the necessary styles for that page.

3. Dynamic CSS Loading

Use dynamic CSS loading to load CSS files only when they're needed. You can use a library like loadCSS to load CSS files dynamically.

4. JavaScript Module Pattern

Use the JavaScript module pattern to organize your code into separate modules, each containing the necessary JavaScript code for a page.

For example, you can create separate modules for each page, like home.js, signup.js, etc. Each module would contain only the necessary JavaScript code for that page.

5. Manual Resource Management

Implement a manual resource management system to load and remove resources as needed. You can use a JavaScript object to keep track of loaded resources and remove them when they're no longer needed.

To remove not-needed resources from the DOM, you can use techniques like:

Removing script tags and CSS links from the DOM when they're no longer needed.
Using a JavaScript object to keep track of loaded resources and removing them when they're no longer needed.
Implementing a custom resource manager that keeps track of loaded resources and removes them when they're no longer needed.
By using one or a combination of these strategies, you can efficiently load page-specific resources without cluttering the DOM with unnecessary resources.