services:
  redis:
    container_name: redis
    image: redis:6-alpine
    restart: unless-stopped
    networks:
      - trans_net
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 3s
      timeout: 3s
      retries: 5

  postgres:
    container_name: db
    image: postgres:15-alpine
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - trans_net
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 3s
      timeout: 3s
      retries: 5

  app:
    container_name: app
    image: app_image
    build:
      context: ./transcendence/.
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - trans_net
    env_file:
      - .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      REDIS_URL: redis://redis:6379/0
    volumes:
      - ./transcendence:/app
      - media_static_vol:/media_static
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 3s
      timeout: 3s
      retries: 5
      start_period: 10s

  nginx:
    container_name: nginx_server
    image: nginx_image
    build:
      context: ./nginx_server/.
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      app:
        condition: service_healthy
    networks:
      - trans_net
    ports:
      # - "80:80"
      # - dont forget to add secure=true to all the cookies in the app
      - "443:443"  # If you want to use HTTPS
    volumes:
      - ./nginx_server/conf/nginx.conf:/etc/nginx/nginx.conf:ro
      - media_static_vol:/media_static
      - ../secrets/.:/etc/nginx/certs/.:ro

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  media_static_vol: #media_static_vol - acts as a bridge between your App and Nginx services allowing uploaded media and static files through Django to be immediately available for Nginx to serve. (needs to do do collectstatic for the static files to be available)
    driver: local  

networks:
  trans_net:
    name: trans_net
    driver: bridge
