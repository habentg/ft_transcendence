# event block: number of connections our nginx server can handle concurrently.
events {
    worker_connections 1024;
}

# http block: configuration for the http server
http {
    # MIME types - basically what type of files are we serving
    # nginx will add the correct headers to the response (then browser knows what do with it) like this:
    include /etc/nginx/mime.types;
    # Default type is application/octet-stream - if we don't know what type of file it is
    # prompts the browser to download the file (insead of trying to render it)
    default_type application/octet-stream;
    server {
        listen 443 ssl;
        listen [::]:443 ssl;
        ssl_protocols TLSv1.2 TLSv1.3; # Enable TLS 1.2 and 1.3
        server_name localhost; # (we will handle requests from https://localhost/...)
        server_tokens off;  # disables displaying the Nginx version in the server response (for security reasons)

        # SSL configuration
        ssl_certificate /etc/nginx/certs/transcendence_cert.crt;
        ssl_certificate_key /etc/nginx/certs/transcendence_pk.pem;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_prefer_server_ciphers on;

        # Serve static files directly
        location /static/ {
            alias /media_static/static/;  # Directly use the mounted static directory
            expires 30d; # Cache static files for 30 day -- should be longer (30 is good as well) for production
            add_header Cache-Control "public, max-age=";
        }

        # Serve media files directly
        location /media/ {
            alias /media_static/media/;  # Directly use the mounted media directory
            expires 30d;
            add_header Cache-Control "public, max-age=2592000"; 
        }

        # not loging health check coz it's too much and it will be hard to read the logs
        location /health/ {
            access_log off;
            # proxy_pass http://neon_pong:8000;
            return 200 'OK';
        }

        # WebSocket routing
        location /ws/ {
            proxy_pass http://neon_pong:8000;
            proxy_http_version 1.1;     # Required for WebSocket (for HTTP/1.1)
            proxy_set_header Upgrade $http_upgrade;  # WebSocket upgrade header
            proxy_set_header Connection "upgrade";   # Ensure connection stays open
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # DOC: https://nginx.org/en/docs/http/ngx_http_proxy_module.html
        location / {
            proxy_pass http://neon_pong:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}